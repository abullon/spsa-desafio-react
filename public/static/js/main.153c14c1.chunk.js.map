{"version":3,"sources":["components/Customer.js","components/CustomerList.js","components/CustomerNew.js","components/CustomerKpi.js","App.js","serviceWorker.js","index.js"],"names":["Customer","_this","this","customer","props","react_default","a","createElement","className","key","customerId","scope","firstName","lastName","age","birthDate","estimateDeathDate","onClick","window","confirm","deleteCustomer","bind","Component","CustomerList","getCustomerAll","isLoading","data","length","width","map","Customer_Customer","CustomerNew","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmit","e","preventDefault","addCustomer","state","setState","onChange","defineProperty","target","name","value","type","placeholder","required","CustomerKpi","getCustomerKpi","averageAge","standardDeviation","App","page","title","customers","customersOffline","customersOfflineData","customerKpi","backToHome","offline","handleGoHomeClick","assertThisInitialized","handleGoCustomerNewClick","handleGoCustomerListClick","handleGoCustomerKpiClick","handleAddCustomer","handleDeleteCustomer","serverUrl","customersUrl","customerKpiUrl","_this2","fetch","then","res","json","catch","err","toogleOfflineMode","_this3","_this4","method","headers","Content-Type","body","JSON","stringify","alert","concat","toConsumableArray","_this5","filter","data-toggle","CustomerNew_CustomerNew","onBack","handleBackToHome","CustomerList_CustomerList","getCustomersData","CustomerKpi_CustomerKpi","href","getModeText","getContent","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.153c14c1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Customer extends Component {\r\n    render() {\r\n        const { customer } = this.props;\r\n\r\n        return (\r\n            <tr className=\"table-active\" key={customer.customerId}>\r\n                <th scope=\"row\">{customer.firstName}</th>\r\n                <td>{customer.lastName}</td>\r\n                <td>{customer.age}</td>\r\n                <td>{customer.birthDate}</td>\r\n                <td>{customer.estimateDeathDate}</td>\r\n                <td>\r\n                <button className=\"btn btn-danger\" \r\n                    onClick={() => {\r\n                        if(window.confirm('Seguro de borrar cliente?')){\r\n                            let deleteCustomer = this.props.deleteCustomer.bind(this, customer.customerId);//bind will return to reference to binded function and not call it.\r\n                            deleteCustomer();\r\n                            }}}>\r\n                    Borrar\r\n                </button>                \r\n                </td>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\n// Validation\r\nCustomer.propTypes = {\r\n    customer: PropTypes.object.isRequired\r\n}","import React, { Component } from 'react';\r\nimport Customer from './Customer'\r\n\r\nexport default class CustomerList extends Component {\r\n    componentDidMount() {\r\n        let getCustomerAll = this.props.getCustomerAll.bind(this);\r\n        getCustomerAll();\r\n    }\r\n\r\n    render() {\r\n        if (this.props.isLoading) {\r\n          return <p>Loading...</p>;\r\n        }\r\n\r\n        return (\r\n            <div className=\"card\">\r\n            <div className=\"btn btn-success\">\r\n                <div>Lista de Clientes\r\n                    <span className=\"badge badge-pill badge-light ml-2\">\r\n                        {this.props.data && this.props.data.length}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n            <table className=\"table table-hover\">\r\n                <thead>\r\n                <tr className=\"table-dark\">\r\n                    <th scope=\"col\">Nombre</th>\r\n                    <th scope=\"col\">Apellido</th>\r\n                    <th scope=\"col\">Edad</th>\r\n                    <th scope=\"col\">Fecha Nacimiento</th>\r\n                    <th scope=\"col\">Fecha Probable Muerte </th>\r\n                    <th width=\"10%\"></th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.props.data && \r\n                        this.props.data.map((customer) =>\r\n                        <Customer key={customer.customerId}\r\n                            customer={customer}\r\n                            deleteCustomer={this.props.deleteCustomer}\r\n                        />\r\n                    )}\r\n                </tbody>\r\n            </table>        \r\n        </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class CustomerNew extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      customerId: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      age: '',\r\n      birthDate: ''\r\n    };\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addCustomer(this.state);\r\n    this.setState({\r\n      customerId: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      age: '',\r\n      birthDate: ''\r\n    });    \r\n  };\r\n\r\n  onChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"btn btn-success\">Creación de Cliente</div>\r\n        <form onSubmit={this.onSubmit} className=\"card-body\">\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              className=\"form-control\"\r\n              value={this.state.firstName}\r\n              onChange={this.onChange}\r\n              placeholder=\"Ingrese Nombre\"\r\n              required\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"lastName\"\r\n              className=\"form-control\"\r\n              value={this.state.lastName}\r\n              onChange={this.onChange}\r\n              placeholder=\"Ingrese Apellido\"\r\n              required\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"number\"\r\n              name=\"age\"\r\n              className=\"form-control\"\r\n              value={this.state.age}\r\n              onChange={this.onChange}\r\n              placeholder=\"Ingrese Edad\"\r\n              required\r\n              />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"birthDate\"\r\n              className=\"form-control\"\r\n              value={this.state.birthDate}\r\n              onChange={this.onChange}\r\n              placeholder=\"Ingrese Fecha Nacimiento\"\r\n              required\r\n              />\r\n          </div>\r\n          <div>\r\n              <button type=\"submit\" className=\"btn btn-success\">\r\n                Grabar\r\n              </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class CustomerKpi extends Component {\r\n    componentDidMount() {\r\n        let getCustomerKpi = this.props.getCustomerKpi.bind(this);\r\n        getCustomerKpi();\r\n    }      \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n            <div className=\"btn btn-success\">KPI de Clientes</div>\r\n                <table className=\"table table-hover\">\r\n                    <thead>\r\n                    <tr className=\"table-dark\">\r\n                        <th scope=\"col\">Promedio edad</th>\r\n                        <th scope=\"col\">Desviación estándar</th>\r\n                        <th width=\"10%\"></th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr className=\"table-active\">\r\n                            <td>{this.props.data.averageAge}</td>\r\n                            <td>{this.props.data.standardDeviation}</td>\r\n                            <td></td>\r\n                        </tr>                          \r\n                    </tbody>\r\n                </table> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport CustomerList from './components/CustomerList';\r\nimport CustomerNew from './components/CustomerNew';\r\nimport CustomerKpi from './components/CustomerKpi';\r\n\r\n// offline data\r\nimport {customersOfflineData} from './customersOfflineData.json';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      page: 'home',\r\n      title: 'Inicio',\r\n      customers: [],\r\n      customersOffline: customersOfflineData,\r\n      customerKpi: [],\r\n      backToHome: false,\r\n      isLoading: false,\r\n      offline: false\r\n    };\r\n    this.handleGoHomeClick = this.handleGoHomeClick.bind(this);\r\n    this.handleGoCustomerNewClick = this.handleGoCustomerNewClick.bind(this);\r\n    this.handleGoCustomerListClick = this.handleGoCustomerListClick.bind(this);\r\n    this.handleGoCustomerKpiClick = this.handleGoCustomerKpiClick.bind(this);\r\n\r\n    this.handleAddCustomer = this.handleAddCustomer.bind(this);\r\n    this.handleDeleteCustomer = this.handleDeleteCustomer.bind(this);\r\n    this.getCustomerAll = this.getCustomerAll.bind(this);\r\n    this.getCustomerKpi = this.getCustomerKpi.bind(this);\r\n\r\n    this.serverUrl = \"http://localhost:8081\";\r\n    this.customersUrl = this.serverUrl + \"/api/v1/customers\";\r\n    this.customerKpiUrl = this.serverUrl + \"/api/v1/customers/kpi\";\r\n  };\r\n\r\n  handleGoHomeClick(e) {\r\n    e.preventDefault();\r\n    this.setState({\r\n      page: 'home',\r\n      title: 'Inicio'\r\n    });\r\n  }\r\n\r\n  handleGoCustomerNewClick(e) {\r\n    e.preventDefault();\r\n    this.setState({\r\n      page: 'customerNew',\r\n      title: 'Creación de Cliente'\r\n    });\r\n  }\r\n\r\n  handleGoCustomerListClick(e) {\r\n    e.preventDefault();\r\n    this.setState({\r\n      page: 'customerList',\r\n      title: 'Lista de Clientes'\r\n    });\r\n  }\r\n\r\n  handleGoCustomerKpiClick(e) {\r\n    e.preventDefault();\r\n    this.setState({\r\n      page: 'customerKpi',\r\n      title: 'KPI de Clientes'\r\n    });\r\n  }   \r\n  \r\n  getCustomerAll() {\r\n    this.setState({ isLoading: true });\r\n    fetch(this.customersUrl)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n          this.setState({ \r\n            customers: data, \r\n            isLoading: false,\r\n            offline: false });\r\n        })\r\n        .catch((err) => {\r\n          this.toogleOfflineMode();\r\n        });\r\n  }\r\n \r\n  getCustomerKpi() {\r\n    this.setState({ isLoading: true });\r\n    fetch(this.customerKpiUrl)\r\n        .then(res => res.json())\r\n        .then((data) => this.setState({ customerKpi: data, isLoading: false }))\r\n        .catch((err) => {\r\n          this.setState({customerKpi: {averageAge: 33.05, standardDeviation:5.89}});\r\n          this.toogleOfflineMode();\r\n        });\r\n  };   \r\n\r\n  handleAddCustomer(customer) {\r\n    fetch(this.customersUrl, {\r\n      method: 'post',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify(customer)\r\n    })\r\n    .then(() => alert('Datos registrados satisfactoriamente!'))\r\n    .catch((err) => {\r\n      customer.estimateDeathDate = \"01/01/2060\"\r\n      this.setState({\r\n        customersOffline: [...this.state.customersOffline, customer]\r\n      });\r\n      this.toogleOfflineMode();\r\n      alert('Datos registrados satisfactoriamente!');\r\n    });    \r\n  };\r\n\r\n  handleDeleteCustomer(customerId) {\r\n    fetch(this.customersUrl, {\r\n      method: 'delete',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify(customerId)\r\n    })\r\n    .then(() => this.setState({page: 'home', title: 'Inicio'}))\r\n    .catch((err) => {\r\n      this.setState({\r\n        customersOffline: this.state.customersOffline.filter((customer) => {\r\n          return customer.customerId !== customerId\r\n        })\r\n      });      \r\n      this.toogleOfflineMode();\r\n    }); \r\n  };\r\n\r\n  toogleOfflineMode() {\r\n    this.setState({\r\n      isLoading: false,\r\n      offline: true });\r\n  }\r\n\r\n  getCustomersData(){\r\n    return this.state.offline ? this.state.customersOffline : this.state.customers;\r\n  }\r\n\r\n  getModeText() {\r\n    return this.state.offline ? \"Offline\" : \"Online\";\r\n  }\r\n\r\n  getContent() {\r\n    if (this.state.page === 'home') {\r\n      return (\r\n        <div className=\"btn-group-vertical\" data-toggle=\"buttons\">\r\n          <button className=\"btn btn-outline-success\"\r\n            onClick={this.handleGoCustomerNewClick}>\r\n            Creación de Cliente\r\n          </button>\r\n          <button className=\"btn btn-outline-success\"\r\n            onClick={this.handleGoCustomerListClick}>\r\n            Lista de Clientes\r\n          </button>\r\n          <button className=\"btn btn-outline-success\"\r\n            onClick={this.handleGoCustomerKpiClick}>\r\n            KPI de Clientes\r\n          </button>            \r\n        </div>\r\n      )\r\n    } else if (this.state.page === 'customerNew') {\r\n      return <CustomerNew addCustomer={this.handleAddCustomer}\r\n                          onBack={this.handleBackToHome} />;\r\n    } else if (this.state.page === 'customerList') {\r\n      return <CustomerList data={this.getCustomersData()}\r\n                           getCustomerAll={this.getCustomerAll}\r\n                           deleteCustomer={this.handleDeleteCustomer}/>;\r\n    } else if (this.state.page === 'customerKpi') {\r\n      return <CustomerKpi data={this.state.customerKpi}\r\n                          getCustomerKpi={this.getCustomerKpi}/>;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let hrefLink = '#';\r\n\r\n    return (\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n        <div className=\"card-link\">\r\n            <div className=\"Inline-left\" >\r\n            <a href={hrefLink} onClick={this.handleGoHomeClick}>\r\n              Inicio\r\n              <i className=\"material-icons\">home</i>\r\n            </a>\r\n            </div> \r\n            <div className=\"Inline-center\">SPSA - Mantenimiento de Clientes</div>\r\n            <div className=\"Inline-right\">({this.getModeText()})</div>        \r\n          </div>\r\n        </div>        \r\n        <div>\r\n          {this.getContent()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}